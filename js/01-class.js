/**
 * Класи
 *  - Оголошення класу
 *  - Конструктор класу
 *  - Методи класу
 *  - Прототип екземпляру
 *  - Приватні властивості
 *  - Геттери і сеттери
 *  - Статичні властивості
 */

// const user = {
//   firstName: "Oleg",
//   secondName: "Davidson",
//   birthDate: 1987,
//   getUserAge() {
//     return new Date().getFullYear() - this.birthDate;
//   },
//   getFullName() {
//     return `${this.firstName} ${this.secondName}`;
//   },
// };

// console.log(user.getFullName());
// console.log(user.getUserAge());
// console.log(user);

//! ======================================================

// клас фактично це синтаксичний цукор функції конструктора. Тому клас - це фукнція. Він відповідає за створення нових обʼєктів(екземплярів) за своїм шаблоном. Кожен екземлпяр буде повʼязаний з класом через ланцюг прототипів. Це означає, що всі методи, які ви хочете використовувати для майбутніх екземплярів будуть зберігатися у самому класі, а не дублюватися у кожен окреми екземпляр.

/*
- Публічні властивості та методи: вони доступні всім, наслідуються в екземпляри, наслідуються в інші класи

- Приватні властивості та методи: вони доступні тільки всередині самого класу, їх не можна викликати за межами цього класу. Приватні властивості та методи не наслідуються в інші класи. Приватні властивості часто працюють в парі з методами аксесорами та реалізують принцип інкапсуляції.

- Статичні властивості та методи: вони доступні тільки з самого класу. Оскільки клас - це функція, а фукнція - це обʼєкт, то клас - це теж обʼєкт. А ми знаємо що у обʼєктів можуть бути властивості. Тому статична властивіть це просто властивіть яка записана в самому класі і звертатись до неї можна тільки через клас. Наприкад User.property. Ці властивості та методи ніяк не наслідуються ні в інші класи, ні в екземпляри, вони просто існують в самому класі для збереження якоїсь внутрішньої інформації або внутрішніх методів розрахунку.

*/

class User {
  static userCounter = 0;
  static incrementUserAmount() {
    this.userCounter += 1;
    console.log(`Created new User. User amount: ${this.userCounter}`);
  }

  #password; // я оголосив приватне поле

  // constructor - це звичайний метод, який викликається під час створення екзепляру класу, тобто, під час створення нового обʼєкту. Це означає що цей метод фактично займається ініціалізацією обʼєкту, тобто, його наповненням (але, тут можна писати будь-який код, який треба запустити при створенні екземпляру).

  constructor(firstName, secondName, birthDate, password) {
    console.log(
      "Увага! Ви створюєте екземпляр за допомогою оператора new та конструктора"
    );
    User.incrementUserAmount();
    this.firstName = firstName;
    this.secondName = secondName;
    this.birthDate = birthDate;
    this.#password = password;
    // чому ми пишемо тут this? Тому що під час створення обʼєкту(екземпляру) це this буде посилатись на новостворенний обʼєкт, відповідно всередині нього створяться всі відповідні поля.
  }

  // публічні методи: публічний інтерфейс класу, методи, за допомогою яких ви можете керувати вашими екземплярами

  getUserAge() {
    return new Date().getFullYear() - this.birthDate;
  }

  getFullName() {
    return `${this.firstName} ${this.secondName}`;
  }

  #chechPassword() {
    const userPass = prompt("Enter a passwod:");
    return userPass === this.#password;
  }

  //get set - методи аксесори, дозволяють читати або задавати значення приватним полям (спеціальний синтаксис!!!!)

  // назва може бути будь-яка, але зазвичай вона співпадає з назвою поля. Фактично використання геттеру створює в вашому обʼєкті публічне поле password, яке просто зберігає значення приватного поля. Обовʼязково повинно стояти return

  get password() {
    if (this.#chechPassword()) {
      return this.#password;
    } else {
      return undefined;
    }
  }

  // set - задає нове значення приватному полю. Обовʼязково очікує якийсь аргумент, тому не пишіть цей метод без параметру. Фактично тут відбувається простий перезапис приватного поля на нове значення, але можна і додати якісь унікальні перевірки.

  set password(newPassword) {
    if (this.#chechPassword() && newPassword.trim().length >= 4) {
      this.#password = newPassword;
    } else {
      alert("Incorrect data!");
    }
  }
}

const user = new User("Oleg", "Davidson", 1987, "qwerty");
// new - це оператор який відповідає за створення екземпляру класу:
// 1. створює новий пустий обʼєкт - {}
// 2. викликає конструктор класу
// 3. вказує конструктору, що this буде посилатись на новий пустий обʼєкт, який він створив (п.1)
// 4. вказує новому екземпляру наш клас в якості прототипу

// user.password = "1111";

// console.log(user);

// console.log(user.password);

// const user1 = new User("Vika", "Ivanova", 1995, "qwerty");
// const user2 = new User("Vika", "Ivanova", 1995, "qwerty");
// const user3 = new User("Vika", "Ivanova", 1995, "qwerty");
// const user4 = new User("Vika", "Ivanova", 1995, "qwerty");

// console.dir(User)