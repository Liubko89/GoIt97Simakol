/**
 * –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª,
 * —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É
 * —Ñ–æ—Ä–º–∞—Ç—ñ <–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞> - <–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞>. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
 * –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.
 *
 * –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É ['Mango', 'Poly', 'Ajax'] –∑
 * —ñ–Ω–¥–µ–∫—Å–æ–º 0 –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ 1 - Mango, –∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 –≤–∏–≤–µ–¥–µ 3 - Ajax.
 */

// function logItems() {
//   let result = "";

//   for (const i in arguments) {
//     result += `${Number(i) + 1} - ${arguments[i]}\n`;
//   }

//   console.log(result);
// }

// logItems("Mango", "Poly", "Ajax");
// logItems("üçé", "üçá", "üçë", "üçå", "üçã");

/**
 * –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é printInfo(names, phones) —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å
 * —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
 * names —Ç–∞ phones –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤,
 * —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö
 * –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
 * –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.
//  */

// function printInfo() {
//   console.log(arguments);
//   const names = arguments[0].split(",");
//   const phones = arguments[1].split(",");
//   console.log(names);
//   console.log(phones);

//   let result = "";

//   for (const i in names) {
//     result += `${names[i]}: ${phones[i]}\n`;
//   }

//   console.log(result);
// }

// printInfo(
//   "Jacob,William,Solomon,Artemis",
//   "89001234567,89001112233,890055566377,890055566300"
// );

/**
 * –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é formatTime(minutes) —è–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è
 * minutes (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω) —É —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–æ–¥–∏–Ω
 * —Ç–∞ —Ö–≤–∏–ª–∏–Ω HH:MM.
 */

// function formatTime(totalMinutes) {
//   const hours = Math.floor(totalMinutes / 60);
//   const minutes = totalMinutes % 60;

//   const resultHours = String(hours).padStart(2, 0);
//   const resultMinutes = String(minutes).padStart(2, 0);

//   return `${resultHours}:${resultMinutes}`;
// }

// console.log(formatTime(70)); // "01:10"
// console.log(formatTime(450)); // "07:30"
// console.log(formatTime(1441)); // "24:01"
// console.log(formatTime(10)); // "00:10"

//! ==============================
// –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—É–º—É –≤—Å—ñ—Ö —á–∏—Å–µ–ª –ø–æ –ø–æ—Ä—è–¥–∫—É –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É n

// —ñ—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–±
// function sumTo(n) {
//   let sum = 0;
//   for (let i = 1; i <= n; i += 1) {
//     sum += i;
//   }
//   return sum;
// }

// console.log(sumTo(5)); // 1 + 2 + 3 + 4 + 5 = 15

// —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–±
// function sumTo(n) {
//   if (n === 0) {
//     return 0;
//   }

//   return n + sumTo(n - 1);
// }

// console.log(sumTo(5)); // 1 + 2 + 3 + 4 + 5 = 15

/*
stack: sumTo(3), sumTo(2), sumTo(1), sumTo(0) 

=======
1. function sumTo(3) {
  if (3 === 0) {
    return 0;
  }

  return 3 + sumTo(3 - 1); // 3 + 3
}

2. function sumTo(2) {
  if (2 === 0) {
    return 0;
  }

  return 2 + sumTo(2 - 1); // 2 + 1
}
3.  function sumTo(1) {
  if (1 === 0) {
    return 0;
  }

  return 1 + sumTo(1 - 1); // 1 + 0
}
4.  function sumTo(0) {
  if (0 === 0) {
    return 0;
  }

  return 1 + sumTo(1 - 1);
}


*/

// // –ø–æ—à—É–∫ –Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Ñ—ñ–±–æ–Ω–∞—á—ñ

// // —ñ—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–±

// function findFibonacci1(n) {
//   let fib1 = 0;
//   let fib2 = 1;

//   if (n === 0) return [fib1];

//   if (n === 1) return [fib1, fib2];

//   const fibArr = [fib1, fib2];

//   for (let i = 1; i <= n; i += 1) {
//     const fib = fib1 + fib2;
//     fibArr.push(fib);

//     fib1 = fib2;
//     fib2 = fib;
//   }

//   return fibArr
// }

// console.log(findFibonacci1(5))
// console.log(findFibonacci1(10))
// console.log(findFibonacci1(20))

// // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥

// function findFibonacci(n) {
//   if (n === 0) return 0;
//   if (n === 1) return 1;

//   return findFibonacci(n - 1) + findFibonacci(n - 2);
// }

// console.log(findFibonacci(5));
// console.log(findFibonacci(10));
// console.log(findFibonacci(20));

// !=======

// const arr = [1, 2, 3];
// console.log(arr);
// const revercedArr = arr.toReversed(); // –Ω–µ –º—É—Ç—É—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤! –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥—É .reverse()
// console.log(revercedArr);
// console.log(arr);
